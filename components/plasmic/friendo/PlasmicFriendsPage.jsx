// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: d1S8dWKKr4PVKg3azHqMAd
// Component: pFyODzmUsTrr
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  initializePlasmicStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import NavBar from "../../NavBar"; // plasmic-import: KnagBLotfm8n/component
import FriendComonent from "../../FriendComonent"; // plasmic-import: TTtT2m4PE29g/component
import { useUnnamedGlobalGroupOfVariants } from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants"; // plasmic-import: lmEUP9r96TgA/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: d1S8dWKKr4PVKg3azHqMAd/projectcss
import sty from "./PlasmicFriendsPage.module.css"; // plasmic-import: pFyODzmUsTrr/css

createPlasmicElementProxy;

export const PlasmicFriendsPage__VariantProps = new Array();

export const PlasmicFriendsPage__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFriendsPage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "navBar.proTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.statTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.caltooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.messTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "friendComonent[].garbageHover",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "navBar.friendsTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    suggestions: usePlasmicDataOp(() => {
      return {
        sourceId: "jPx9VXTMGhi2nPHAixuLPM",
        opId: "5b508eee-6b09-4363-b01a-75f8ba0c25dd",
        userArgs: {},
        cacheKey: `plasmic.$.5b508eee-6b09-4363-b01a-75f8ba0c25dd.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    unnamedGlobalGroupOfVariants: useUnnamedGlobalGroupOfVariants()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant2]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant2"
                )
            }
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            caltooltip={generateStateValueProp($state, [
              "navBar",
              "caltooltip"
            ])}
            className={classNames("__wab_instance", sty.navBar)}
            friendsTooltip={generateStateValueProp($state, [
              "navBar",
              "friendsTooltip"
            ])}
            messTooltip={generateStateValueProp($state, [
              "navBar",
              "messTooltip"
            ])}
            onCaltooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, ["navBar", "caltooltip"]).apply(
                null,
                eventArgs
              );
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onFriendsTooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, [
                "navBar",
                "friendsTooltip"
              ]).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onMessTooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, [
                "navBar",
                "messTooltip"
              ]).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onProTooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, ["navBar", "proTooltip"]).apply(
                null,
                eventArgs
              );
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onStatTooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, [
                "navBar",
                "statTooltip"
              ]).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            proTooltip={generateStateValueProp($state, [
              "navBar",
              "proTooltip"
            ])}
            statTooltip={generateStateValueProp($state, [
              "navBar",
              "statTooltip"
            ])}
          />

          <div className={classNames(projectcss.all, sty.freeBox__xqyTq)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___033E
              )}
            >
              {"All Your Friends!"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___1IOym)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.suggestions.data.filter(
                      suggestion => suggestion.username === "Nel"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (() => {
                  const child$Props = {
                    className: classNames(
                      "__wab_instance",
                      sty.friendComonent,
                      {
                        [sty.friendComonentglobal_unnamedGlobalGroupOfVariants_unnamedVariant2]:
                          hasVariant(
                            globalVariants,
                            "unnamedGlobalGroupOfVariants",
                            "unnamedVariant2"
                          )
                      }
                    ),
                    currentItem: currentItem,
                    garbageHover: generateStateValueProp($state, [
                      "friendComonent",
                      __plasmic_idx_0,
                      "garbageHover"
                    ]),
                    key: currentIndex,
                    onGarbageHoverChange: async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "friendComonent",
                        __plasmic_idx_0,
                        "garbageHover"
                      ]).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }
                  };
                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "friendComonent[].garbageHover",
                        initFunc: ({ $props, $state, $queries }) => false
                      }
                    ],

                    [__plasmic_idx_0]
                  );
                  return (
                    <FriendComonent
                      data-plasmic-name={"friendComonent"}
                      data-plasmic-override={overrides.friendComonent}
                      {...child$Props}
                    />
                  );
                })();
              })}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jOnjn
              )}
              onClick={async event => {
                const $steps = {};
                $steps["goToAddNewFriend"] = true
                  ? (() => {
                      const actionArgs = { destination: `/add-new-friend` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToAddNewFriend"] != null &&
                  typeof $steps["goToAddNewFriend"] === "object" &&
                  typeof $steps["goToAddNewFriend"].then === "function"
                ) {
                  $steps["goToAddNewFriend"] = await $steps["goToAddNewFriend"];
                }
              }}
            >
              {"add a new friend"}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "navBar", "friendComonent"],
  navBar: ["navBar"],
  friendComonent: ["friendComonent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFriendsPage__ArgProps,
          internalVariantPropNames: PlasmicFriendsPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFriendsPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFriendsPage";
  } else {
    func.displayName = `PlasmicFriendsPage.${nodeName}`;
  }
  return func;
}

export const PlasmicFriendsPage = Object.assign(
  // Top-level PlasmicFriendsPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    friendComonent: makeNodeComponent("friendComonent"),
    // Metadata about props expected for PlasmicFriendsPage
    internalVariantProps: PlasmicFriendsPage__VariantProps,
    internalArgProps: PlasmicFriendsPage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFriendsPage;
/* prettier-ignore-end */
