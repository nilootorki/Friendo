// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: d1S8dWKKr4PVKg3azHqMAd
// Component: DVa-YbIJ58vg
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import NavBar from "../../NavBar"; // plasmic-import: KnagBLotfm8n/component
import TextInput from "../../TextInput"; // plasmic-import: B7pg-YS7wyr5/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: d1S8dWKKr4PVKg3azHqMAd/projectcss
import sty from "./PlasmicCallHistory.module.css"; // plasmic-import: DVa-YbIJ58vg/css

createPlasmicElementProxy;

export const PlasmicCallHistory__VariantProps = new Array();

export const PlasmicCallHistory__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCallHistory__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "navBar.proTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.statTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.caltooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.messTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "textInput[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "navBar.friendsTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "jPx9VXTMGhi2nPHAixuLPM",
        opId: "5b508eee-6b09-4363-b01a-75f8ba0c25dd",
        userArgs: {},
        cacheKey: `plasmic.$.5b508eee-6b09-4363-b01a-75f8ba0c25dd.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            caltooltip={generateStateValueProp($state, [
              "navBar",
              "caltooltip"
            ])}
            className={classNames("__wab_instance", sty.navBar)}
            friendsTooltip={generateStateValueProp($state, [
              "navBar",
              "friendsTooltip"
            ])}
            messTooltip={generateStateValueProp($state, [
              "navBar",
              "messTooltip"
            ])}
            onCaltooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, ["navBar", "caltooltip"]).apply(
                null,
                eventArgs
              );
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onFriendsTooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, [
                "navBar",
                "friendsTooltip"
              ]).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onMessTooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, [
                "navBar",
                "messTooltip"
              ]).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onProTooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, ["navBar", "proTooltip"]).apply(
                null,
                eventArgs
              );
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onStatTooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, [
                "navBar",
                "statTooltip"
              ]).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            proTooltip={generateStateValueProp($state, [
              "navBar",
              "proTooltip"
            ])}
            statTooltip={generateStateValueProp($state, [
              "navBar",
              "statTooltip"
            ])}
          />

          <div className={classNames(projectcss.all, sty.freeBox__haMm)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___0YGbn
              )}
            >
              {"Call Date"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__klIwR
              )}
            >
              {"Call Duration"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__osNl
              )}
            >
              {"Comment"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___3Z5Or)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return (() => {
                    const rawData = $queries.query.data.find(
                      item =>
                        item.username === "Mahshid" &&
                        item.friend_name === "Rojan"
                    )?.call;
                    return JSON.parse(rawData);
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__l2P7G)}
                  key={currentIndex}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__drzO3)}
                    displayHeight={"27px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"27px"}
                    loading={"lazy"}
                    src={(() => {
                      try {
                        return currentItem.type === "INCOMING"
                          ? "https://img.plasmic.app/img-optimizer/v1/img?src=https%3A%2F%2Fimg.plasmic.app%2Fimg-optimizer%2Fv1%2Fimg%2F27dec4483be927eafa2bdedd04ee70b8.png&q=75"
                          : currentItem.type === "OUTGOING"
                          ? "https://img.plasmic.app/img-optimizer/v1/img?src=https%3A%2F%2Fimg.plasmic.app%2Fimg-optimizer%2Fv1%2Fimg%2F4bcbd95f65d8792e191af4f82b762996.png&q=75"
                          : "https://img.plasmic.app/img-optimizer/v1/img?src=https%3A%2F%2Fimg.plasmic.app%2Fimg-optimizer%2Fv1%2Fimg%2F738e90c05c308f4aa09f3147f1d6d25a.png&q=75";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return {
                            src: "/plasmic/friendo/images/icons8IncomingCall50Png.png",
                            fullWidth: 50,
                            fullHeight: 50,
                            aspectRatio: undefined
                          };
                        }
                        throw e;
                      }
                    })()}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8J6XF
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.date;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "2025-3-12";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wdIVz
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (() => {
                            const time = Number(currentItem.duration);
                            const minute = Math.floor(time / 60);
                            const seconds = (time % 60)
                              .toString()
                              .padStart(2, "0");
                            const formattedTime = `${minute}:${seconds}`;
                            return formattedTime;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "from:";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                    defaultValue={``}
                    disabled={false}
                    onChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "textInput",
                        __plasmic_idx_0,
                        "value"
                      ]).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"Enter your thoughts about the call"}
                    readOnly={false}
                  />
                </div>
              );
            })}
            <div className={classNames(projectcss.all, sty.freeBox___61Rxh)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__hBs7G)}
                displayHeight={"27px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"27px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/friendo/images/icons8IncomingCall50Png.png",
                  fullWidth: 50,
                  fullHeight: 50,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cSyy6
                )}
              >
                {"date:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lhcm
                )}
              >
                {"2025-12-31"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3Bn7L
                )}
              >
                {"to:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xTSei
                )}
              >
                {"Rojan"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__ipjv)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__xt0Yt)}
                displayHeight={"27px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"27px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/friendo/images/icons8MissedCall50Png.png",
                  fullWidth: 50,
                  fullHeight: 50,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__h3UL8
                )}
              >
                {"date:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lbeZn
                )}
              >
                {"2025-6-17"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yyT0N
                )}
              >
                {"from:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__noAl2
                )}
              >
                {"Mahshid"}
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "navBar", "textInput"],
  navBar: ["navBar"],
  textInput: ["textInput"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCallHistory__ArgProps,
          internalVariantPropNames: PlasmicCallHistory__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCallHistory__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCallHistory";
  } else {
    func.displayName = `PlasmicCallHistory.${nodeName}`;
  }
  return func;
}

export const PlasmicCallHistory = Object.assign(
  // Top-level PlasmicCallHistory renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    textInput: makeNodeComponent("textInput"),
    // Metadata about props expected for PlasmicCallHistory
    internalVariantProps: PlasmicCallHistory__VariantProps,
    internalArgProps: PlasmicCallHistory__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCallHistory;
/* prettier-ignore-end */
