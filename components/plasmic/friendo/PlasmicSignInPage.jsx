// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: d1S8dWKKr4PVKg3azHqMAd
// Component: NyC0ja4FReyd
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  get as $stateGet,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import TextField from "../../TextField"; // plasmic-import: XtPi33MMKJk2/component
import Button from "../../Button"; // plasmic-import: R-SJru1lXq4W/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: d1S8dWKKr4PVKg3azHqMAd/projectcss
import sty from "./PlasmicSignInPage.module.css"; // plasmic-import: NyC0ja4FReyd/css

createPlasmicElementProxy;

export const PlasmicSignInPage__VariantProps = new Array();

export const PlasmicSignInPage__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSignInPage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "username.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "password.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "showpass",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "wrongUsername",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "wrongPassword",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const new$Queries = {
    usersTable: usePlasmicDataOp(() => {
      return {
        sourceId: "jPx9VXTMGhi2nPHAixuLPM",
        opId: "d3669a13-068f-4053-b073-74632e9142a7",
        userArgs: {},
        cacheKey: `plasmic.$.d3669a13-068f-4053-b073-74632e9142a7.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "fSBHCDiKQaXCxvx1oE84mu",
        opId: "c6203751-7a07-44f1-980b-0f6fb92270f7",
        userArgs: {},
        cacheKey: `plasmic.$.c6203751-7a07-44f1-980b-0f6fb92270f7.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <h1
            data-plasmic-name={"h1"}
            data-plasmic-override={overrides.h1}
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1
            )}
          >
            {"Friendo"}
          </h1>
          <div className={classNames(projectcss.all, sty.freeBox__hk0XY)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dHkBx
              )}
            >
              {"Sign In"}
            </div>
            <TextField
              data-plasmic-name={"username"}
              data-plasmic-override={overrides.username}
              className={classNames("__wab_instance", sty.username)}
              onChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, ["username", "value"]).apply(
                  null,
                  eventArgs
                );
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={"Username"}
              showDescription={false}
              showLabel={true}
            />

            {(() => {
              try {
                return $state.wrongUsername;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gvtVk
                )}
              >
                {"wrong username"}
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__s23Y)}>
              <TextField
                data-plasmic-name={"password"}
                data-plasmic-override={overrides.password}
                className={classNames("__wab_instance", sty.password)}
                onChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "password",
                    "value"
                  ]).apply(null, eventArgs);
                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                type={(() => {
                  try {
                    return $state.showpass ? "text" : "password";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "text";
                    }
                    throw e;
                  }
                })()}
              />

              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"23px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"23px"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateShowpass"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["showpass"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;
                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateShowpass"] != null &&
                    typeof $steps["updateShowpass"] === "object" &&
                    typeof $steps["updateShowpass"].then === "function"
                  ) {
                    $steps["updateShowpass"] = await $steps["updateShowpass"];
                  }
                }}
                src={{
                  src: "/plasmic/friendo/images/icons8Eye301Png.png",
                  fullWidth: 30,
                  fullHeight: 30,
                  aspectRatio: undefined
                }}
              />
            </div>
            {(() => {
              try {
                return $state.wrongPassword;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uXwVd
                )}
              >
                {"wrong password"}
              </div>
            ) : null}
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8ZWe4
                  )}
                >
                  {"Sign In"}
                </div>
              }
              onClick={async event => {
                const $steps = {};
                $steps["updateShowpass"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["showpass"]
                        },
                        operation: 0
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateShowpass"] != null &&
                  typeof $steps["updateShowpass"] === "object" &&
                  typeof $steps["updateShowpass"].then === "function"
                ) {
                  $steps["updateShowpass"] = await $steps["updateShowpass"];
                }
                $steps["checkSignIn"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "kyQLvzX4VBgHR6BbD2tTbc",
                          opId: "cb90bf08-d970-468a-b069-ed344e25bded",
                          userArgs: {
                            body: [$state.username.value, $state.password.value]
                          },
                          cacheKey: null,
                          invalidatedKeys: [],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["checkSignIn"] != null &&
                  typeof $steps["checkSignIn"] === "object" &&
                  typeof $steps["checkSignIn"].then === "function"
                ) {
                  $steps["checkSignIn"] = await $steps["checkSignIn"];
                }
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zTnEm
              )}
            >
              {"You can also sign in through the app."}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "h1", "username", "password", "img", "button"],
  h1: ["h1"],
  username: ["username"],
  password: ["password"],
  img: ["img"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSignInPage__ArgProps,
          internalVariantPropNames: PlasmicSignInPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSignInPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignInPage";
  } else {
    func.displayName = `PlasmicSignInPage.${nodeName}`;
  }
  return func;
}

export const PlasmicSignInPage = Object.assign(
  // Top-level PlasmicSignInPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    username: makeNodeComponent("username"),
    password: makeNodeComponent("password"),
    img: makeNodeComponent("img"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicSignInPage
    internalVariantProps: PlasmicSignInPage__VariantProps,
    internalArgProps: PlasmicSignInPage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSignInPage;
/* prettier-ignore-end */
