// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: d1S8dWKKr4PVKg3azHqMAd
// Component: gg97tV4Rt324
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  get as $stateGet,
  initializePlasmicStates,
  renderPlasmicSlot,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import NavBar from "../../NavBar"; // plasmic-import: KnagBLotfm8n/component
import Button from "../../Button"; // plasmic-import: R-SJru1lXq4W/component
import Checkbox from "../../Checkbox"; // plasmic-import: qcH6HD0MTML6/component
import Recommendation from "../../Recommendation"; // plasmic-import: k5tf2deh1V9A/component
import Popover from "../../Popover"; // plasmic-import: pEo-eFzuH1TF/component
import TextInput from "../../TextInput"; // plasmic-import: B7pg-YS7wyr5/component
import { useScreenVariants as useScreenVariantss47GOinckgZx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: s47GOinckgZX/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: d1S8dWKKr4PVKg3azHqMAd/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: gg97tV4Rt324/css

createPlasmicElementProxy;

export const PlasmicHome__VariantProps = new Array();

export const PlasmicHome__ArgProps = new Array("children");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "navBar.proTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.statTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.caltooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.messTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "checkbox[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "recommendation[].variable2",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "visibleCount",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 5
      },
      {
        path: "navBar.friendsTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "runAnalysisText",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    componentData: usePlasmicDataOp(() => {
      return {
        sourceId: "jPx9VXTMGhi2nPHAixuLPM",
        opId: "2e947b72-8f4f-43f4-b032-c2f857fa9421",
        userArgs: {},
        cacheKey: `plasmic.$.2e947b72-8f4f-43f4-b032-c2f857fa9421.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    logIn: usePlasmicDataOp(() => {
      return {
        sourceId: "kyQLvzX4VBgHR6BbD2tTbc",
        opId: "9d0f8f57-0d01-4fc8-a295-33374652a35d",
        userArgs: {},
        cacheKey: `plasmic.$.9d0f8f57-0d01-4fc8-a295-33374652a35d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantss47GOinckgZx()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            caltooltip={generateStateValueProp($state, [
              "navBar",
              "caltooltip"
            ])}
            className={classNames("__wab_instance", sty.navBar)}
            friendsTooltip={generateStateValueProp($state, [
              "navBar",
              "friendsTooltip"
            ])}
            messTooltip={generateStateValueProp($state, [
              "navBar",
              "messTooltip"
            ])}
            onCaltooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, ["navBar", "caltooltip"]).apply(
                null,
                eventArgs
              );
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onFriendsTooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, [
                "navBar",
                "friendsTooltip"
              ]).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onMessTooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, [
                "navBar",
                "messTooltip"
              ]).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onProTooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, ["navBar", "proTooltip"]).apply(
                null,
                eventArgs
              );
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onStatTooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, [
                "navBar",
                "statTooltip"
              ]).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            proTooltip={generateStateValueProp($state, [
              "navBar",
              "proTooltip"
            ])}
            statTooltip={generateStateValueProp($state, [
              "navBar",
              "statTooltip"
            ])}
          />

          <div className={classNames(projectcss.all, sty.freeBox___1UhyR)}>
            <div className={classNames(projectcss.all, sty.freeBox___70QMx)}>
              <div className={classNames(projectcss.all, sty.freeBox__nd047)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__v43Ei
                  )}
                  onClick={async event => {
                    const $steps = {};
                  }}
                >
                  {"AI Recommendations"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___8CtKx)}>
                <div className={classNames(projectcss.all, sty.freeBox__pT1B)}>
                  <Button
                    className={classNames("__wab_instance", sty.button__ww1X)}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__l9TSd
                        )}
                      >
                        {"Run Analysis"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateRunAnalysisText"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["runAnalysisText"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateRunAnalysisText"] != null &&
                        typeof $steps["updateRunAnalysisText"] === "object" &&
                        typeof $steps["updateRunAnalysisText"].then ===
                          "function"
                      ) {
                        $steps["updateRunAnalysisText"] = await $steps[
                          "updateRunAnalysisText"
                        ];
                      }
                    }}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button__fnIwR)}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mvYd3
                        )}
                      >
                        {"Mood Tracking"}
                      </div>
                    }
                  />
                </div>
                {(() => {
                  try {
                    return $state.runAnalysisText;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3X6L0
                    )}
                  >
                    {
                      "Run analysis request registered. please come back later to see the results."
                    }
                  </div>
                ) : null}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xAnVj
                )}
              >
                {"AI Recommendations"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__bLmrx)}>
              <div className={classNames(projectcss.all, sty.freeBox__gDxqJ)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $queries.componentData.data
                        .filter(component => component.username === "Nel")
                        .slice(0, $state.visibleCount);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__itbO)}
                      key={currentIndex}
                    >
                      <Checkbox
                        data-plasmic-name={"checkbox"}
                        data-plasmic-override={overrides.checkbox}
                        className={classNames("__wab_instance", sty.checkbox)}
                        label={null}
                        onChange={async (...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "checkbox",
                            __plasmic_idx_0,
                            "isSelected"
                          ]).apply(null, eventArgs);
                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      />

                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.recommendation
                          ),
                          currentItem: currentItem,
                          onVariable2Change: async (...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "recommendation",
                              __plasmic_idx_0,
                              "variable2"
                            ]).apply(null, eventArgs);
                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          variable2: generateStateValueProp($state, [
                            "recommendation",
                            __plasmic_idx_0,
                            "variable2"
                          ])
                        };
                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "recommendation[].variable2",
                              initFunc: ({ $props, $state, $queries }) => false
                            }
                          ],

                          [__plasmic_idx_0]
                        );
                        return (
                          <Recommendation
                            data-plasmic-name={"recommendation"}
                            data-plasmic-override={overrides.recommendation}
                            {...child$Props}
                          >
                            {renderPlasmicSlot({
                              defaultContents: (
                                <React.Fragment>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__izIvh
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__tmo
                                      )}
                                      onClick={async event => {
                                        const $steps = {};
                                      }}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.suggestion;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "You should call sara, its been a long time!";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <Popover
                                      className={classNames(
                                        "__wab_instance",
                                        sty.popover__vtiBb
                                      )}
                                      content={
                                        <Stack__
                                          as={"div"}
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__g3Q
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__qyeex
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__bc2Gy
                                              )}
                                            >
                                              {"This is a Popover!"}
                                            </div>
                                            <PlasmicImg__
                                              alt={""}
                                              className={classNames(
                                                sty.img___49GMc
                                              )}
                                              displayHeight={"auto"}
                                              displayMaxHeight={"none"}
                                              displayMaxWidth={"100%"}
                                              displayMinHeight={"0"}
                                              displayMinWidth={"0"}
                                              displayWidth={"20px"}
                                              loading={"lazy"}
                                              onClick={async event => {
                                                const $steps = {};
                                                $steps[
                                                  "updateNavBarProTooltip"
                                                ] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "navBar",
                                                            "proTooltip"
                                                          ]
                                                        },
                                                        operation: 0
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;
                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          value
                                                        );
                                                        return value;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps[
                                                    "updateNavBarProTooltip"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "updateNavBarProTooltip"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateNavBarProTooltip"
                                                  ].then === "function"
                                                ) {
                                                  $steps[
                                                    "updateNavBarProTooltip"
                                                  ] = await $steps[
                                                    "updateNavBarProTooltip"
                                                  ];
                                                }
                                              }}
                                              src={{
                                                src: "/plasmic/friendo/images/icons8Edit24Png.png",
                                                fullWidth: 24,
                                                fullHeight: 24,
                                                aspectRatio: undefined
                                              }}
                                            />
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__p2
                                            )}
                                          >
                                            <TextInput
                                              className={classNames(
                                                "__wab_instance",
                                                sty.textInput__lgy98
                                              )}
                                              placeholder={"Enter your comment"}
                                            />

                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__dyBl4
                                              )}
                                            >
                                              {"submit"}
                                            </div>
                                          </div>
                                        </Stack__>
                                      }
                                      trigger={
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__xdxDd)}
                                          displayHeight={"25px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"100%"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"25px"}
                                          loading={"lazy"}
                                          onLoad={async event => {
                                            const $steps = {};
                                            $steps["runCode"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    customFunction:
                                                      async () => {
                                                        return (() => {
                                                          const filteredItems =
                                                            $queries.componentData.data.filter(
                                                              item =>
                                                                item.username ===
                                                                "Nel"
                                                            );
                                                          const recomElements =
                                                            document.querySelectorAll(
                                                              ".plasmic_default__all.plasmic_default__div.Recommendation__freeBox__vqzaP"
                                                            );
                                                          return recomElements.forEach(
                                                            (
                                                              element,
                                                              index
                                                            ) => {
                                                              const score =
                                                                filteredItems[
                                                                  index
                                                                ]?.total_score;
                                                              if (
                                                                score !=
                                                                undefined
                                                              ) {
                                                                if (
                                                                  score < -0.5
                                                                ) {
                                                                  element.style.background =
                                                                    "linear-gradient(90deg, #E25454, white)";
                                                                } else if (
                                                                  score <= 0.5
                                                                ) {
                                                                  element.style.background =
                                                                    "linear-gradient(90deg, #C2BFBF, white)";
                                                                } else {
                                                                  element.style.background =
                                                                    "linear-gradient(90deg, #69B1FF, white)";
                                                                }
                                                              }
                                                            }
                                                          );
                                                        })();
                                                      }
                                                  };
                                                  return (({
                                                    customFunction
                                                  }) => {
                                                    return customFunction();
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["runCode"] != null &&
                                              typeof $steps["runCode"] ===
                                                "object" &&
                                              typeof $steps["runCode"].then ===
                                                "function"
                                            ) {
                                              $steps["runCode"] = await $steps[
                                                "runCode"
                                              ];
                                            }
                                          }}
                                          src={{
                                            src: "/plasmic/friendo/images/icons8Note50Png.png",
                                            fullWidth: 50,
                                            fullHeight: 50,
                                            aspectRatio: undefined
                                          }}
                                        />
                                      }
                                    />
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__juqs1
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__cN9Cy
                                      )}
                                    >
                                      {"this recommendation is great!"}
                                    </div>
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__sAf1X)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"auto"}
                                      loading={"lazy"}
                                      src={{
                                        src: "/plasmic/friendo/images/icons8Edit24Png.png",
                                        fullWidth: 24,
                                        fullHeight: 24,
                                        aspectRatio: undefined
                                      }}
                                    />
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__oaTti
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.timestamp.slice(
                                            0,
                                            10
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "2 hours ago";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </React.Fragment>
                              ),

                              value: args.children
                            })}
                          </Recommendation>
                        );
                      })()}
                    </div>
                  );
                })}
              </div>
              {(() => {
                try {
                  return (
                    $state.visibleCount <
                    $queries.componentData.data.filter(
                      com => com.username === "Nel"
                    ).length
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ho3Eb
                  )}
                  onClick={async event => {
                    const $steps = {};
                    $steps["updateVisibleCount"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["visibleCount"]
                            },
                            operation: 0,
                            value: $state.visibleCount + 5
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateVisibleCount"] != null &&
                      typeof $steps["updateVisibleCount"] === "object" &&
                      typeof $steps["updateVisibleCount"].then === "function"
                    ) {
                      $steps["updateVisibleCount"] = await $steps[
                        "updateVisibleCount"
                      ];
                    }
                  }}
                >
                  {"See more"}
                </div>
              ) : null}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "navBar", "checkbox", "recommendation"],
  navBar: ["navBar"],
  checkbox: ["checkbox"],
  recommendation: ["recommendation"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    checkbox: makeNodeComponent("checkbox"),
    recommendation: makeNodeComponent("recommendation"),
    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
