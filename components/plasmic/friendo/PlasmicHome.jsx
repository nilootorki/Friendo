// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: d1S8dWKKr4PVKg3azHqMAd
// Component: gg97tV4Rt324
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  renderPlasmicSlot,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import NavBar from "../../NavBar"; // plasmic-import: KnagBLotfm8n/component
import Button from "../../Button"; // plasmic-import: R-SJru1lXq4W/component
import Checkbox from "../../Checkbox"; // plasmic-import: qcH6HD0MTML6/component
import { useScreenVariants as useScreenVariantss47GOinckgZx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: s47GOinckgZX/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: d1S8dWKKr4PVKg3azHqMAd/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: gg97tV4Rt324/css

createPlasmicElementProxy;

export const PlasmicHome__VariantProps = new Array();

export const PlasmicHome__ArgProps = new Array("children");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "checkbox.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "navBar.proTooltip",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.statTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.caltooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.messTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantss47GOinckgZx()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox___1UhyR)}>
            <div className={classNames(projectcss.all, sty.freeBox___3MZl)}>
              <NavBar
                data-plasmic-name={"navBar"}
                data-plasmic-override={overrides.navBar}
                caltooltip={generateStateValueProp($state, [
                  "navBar",
                  "caltooltip"
                ])}
                className={classNames("__wab_instance", sty.navBar)}
                messTooltip={generateStateValueProp($state, [
                  "navBar",
                  "messTooltip"
                ])}
                onCaltooltipChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "navBar",
                    "caltooltip"
                  ]).apply(null, eventArgs);
                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onMessTooltipChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "navBar",
                    "messTooltip"
                  ]).apply(null, eventArgs);
                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onProTooltipChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "navBar",
                    "proTooltip"
                  ]).apply(null, eventArgs);
                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onStatTooltipChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "navBar",
                    "statTooltip"
                  ]).apply(null, eventArgs);
                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                proTooltip={generateStateValueProp($state, [
                  "navBar",
                  "proTooltip"
                ])}
                statTooltip={generateStateValueProp($state, [
                  "navBar",
                  "statTooltip"
                ])}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___70QMx)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__v43Ei
                )}
              >
                {"AI Recommendations"}
              </div>
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                end={null}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9XrC
                    )}
                  >
                    {"See All Friends"}
                  </div>
                }
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xAnVj
                )}
              >
                {"AI Recommendations"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__bLmrx)}>
              <div className={classNames(projectcss.all, sty.freeBox__gDxqJ)}>
                <Checkbox
                  data-plasmic-name={"checkbox"}
                  data-plasmic-override={overrides.checkbox}
                  className={classNames("__wab_instance", sty.checkbox)}
                  label={null}
                  onChange={async (...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "checkbox",
                      "isSelected"
                    ]).apply(null, eventArgs);
                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                />

                <div className={classNames(projectcss.all, sty.freeBox__gSkfn)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ny76X)}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox___89Th2)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ekCDn)}
                    >
                      {renderPlasmicSlot({
                        defaultContents: (
                          <React.Fragment>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fYyVh
                              )}
                            >
                              {"You should call sara, its been a long time!"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___1IXC
                              )}
                            >
                              {"2 hours ago"}
                            </div>
                          </React.Fragment>
                        ),

                        value: args.children,
                        className: classNames(sty.slotTargetChildren)
                      })}
                    </div>
                  </div>
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ho3Eb
                )}
              >
                {"See all"}
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "navBar", "button", "checkbox"],
  navBar: ["navBar"],
  button: ["button"],
  checkbox: ["checkbox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    button: makeNodeComponent("button"),
    checkbox: makeNodeComponent("checkbox"),
    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
