// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: d1S8dWKKr4PVKg3azHqMAd
// Component: QGsu4NsE0n29
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import NavBar from "../../NavBar"; // plasmic-import: KnagBLotfm8n/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: d1S8dWKKr4PVKg3azHqMAd/projectcss
import sty from "./PlasmicStatistics.module.css"; // plasmic-import: QGsu4NsE0n29/css

createPlasmicElementProxy;

export const PlasmicStatistics__VariantProps = new Array();

export const PlasmicStatistics__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStatistics__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "navBar.proTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.statTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.caltooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.messTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.friendsTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    componentData: usePlasmicDataOp(() => {
      return {
        sourceId: "jPx9VXTMGhi2nPHAixuLPM",
        opId: "5b508eee-6b09-4363-b01a-75f8ba0c25dd",
        userArgs: {},
        cacheKey: `plasmic.$.5b508eee-6b09-4363-b01a-75f8ba0c25dd.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            caltooltip={generateStateValueProp($state, [
              "navBar",
              "caltooltip"
            ])}
            className={classNames("__wab_instance", sty.navBar)}
            friendsTooltip={generateStateValueProp($state, [
              "navBar",
              "friendsTooltip"
            ])}
            messTooltip={generateStateValueProp($state, [
              "navBar",
              "messTooltip"
            ])}
            onCaltooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, ["navBar", "caltooltip"]).apply(
                null,
                eventArgs
              );
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onFriendsTooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, [
                "navBar",
                "friendsTooltip"
              ]).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onMessTooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, [
                "navBar",
                "messTooltip"
              ]).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onProTooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, ["navBar", "proTooltip"]).apply(
                null,
                eventArgs
              );
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onStatTooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, [
                "navBar",
                "statTooltip"
              ]).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            proTooltip={generateStateValueProp($state, [
              "navBar",
              "proTooltip"
            ])}
            statTooltip={generateStateValueProp($state, [
              "navBar",
              "statTooltip"
            ])}
          />

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([
              2, 3, 4
            ]).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__anlC8)}
                  displayHeight={"600px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"250px"}
                  key={currentIndex}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/friendo/images/_6124A605B3F5169Aef18755F5490F8F4Jpg.jpg",
                    fullWidth: 736,
                    fullHeight: 736,
                    aspectRatio: undefined
                  }}
                />
              );
            })}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__i9Xnd
              )}
            >
              {"random1"}
            </div>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__dp8ZO)}
              displayHeight={"600px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"250px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/friendo/images/_6124A605B3F5169Aef18755F5490F8F4Jpg.jpg",
                fullWidth: 736,
                fullHeight: 736,
                aspectRatio: undefined
              }}
            />
          </div>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return [2, 3, 4, 5, 6, 7, 8, 9, 10];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wsg2W
                )}
                key={currentIndex}
              >
                {"random 2"}
              </div>
            );
          })}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "navBar", "freeBox"],
  navBar: ["navBar"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStatistics__ArgProps,
          internalVariantPropNames: PlasmicStatistics__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStatistics__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStatistics";
  } else {
    func.displayName = `PlasmicStatistics.${nodeName}`;
  }
  return func;
}

export const PlasmicStatistics = Object.assign(
  // Top-level PlasmicStatistics renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicStatistics
    internalVariantProps: PlasmicStatistics__VariantProps,
    internalArgProps: PlasmicStatistics__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicStatistics;
/* prettier-ignore-end */
