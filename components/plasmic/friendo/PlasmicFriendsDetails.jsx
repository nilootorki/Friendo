// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: d1S8dWKKr4PVKg3azHqMAd
// Component: iWEXpMMIuiJP
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import NavBar from "../../NavBar"; // plasmic-import: KnagBLotfm8n/component
import TextInput from "../../TextInput"; // plasmic-import: B7pg-YS7wyr5/component
import Button from "../../Button"; // plasmic-import: R-SJru1lXq4W/component
import { useUnnamedGlobalGroupOfVariants } from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants"; // plasmic-import: lmEUP9r96TgA/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: d1S8dWKKr4PVKg3azHqMAd/projectcss
import sty from "./PlasmicFriendsDetails.module.css"; // plasmic-import: iWEXpMMIuiJP/css

createPlasmicElementProxy;

export const PlasmicFriendsDetails__VariantProps = new Array();

export const PlasmicFriendsDetails__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFriendsDetails__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "navBar.proTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.statTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.caltooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.messTooltip",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "selectFriend",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          id: 0,
          user_id: 0,
          username: "",
          friend_name: "",
          suggestion: "",
          gender: "Female",
          comment: "",
          timestamp: "",
          total_score: 0
        })
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "noteUpdate",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "jPx9VXTMGhi2nPHAixuLPM",
        opId: "5b508eee-6b09-4363-b01a-75f8ba0c25dd",
        userArgs: {},
        cacheKey: `plasmic.$.5b508eee-6b09-4363-b01a-75f8ba0c25dd.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    componentData: usePlasmicDataOp(() => {
      return {
        sourceId: "jPx9VXTMGhi2nPHAixuLPM",
        opId: "0e28f37f-bd51-489d-ac94-afa92f3775be",
        userArgs: {},
        cacheKey: `plasmic.$.0e28f37f-bd51-489d-ac94-afa92f3775be.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    unnamedGlobalGroupOfVariants: useUnnamedGlobalGroupOfVariants()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant2]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant2"
                ),
              [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                )
            }
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            caltooltip={generateStateValueProp($state, [
              "navBar",
              "caltooltip"
            ])}
            className={classNames("__wab_instance", sty.navBar)}
            messTooltip={generateStateValueProp($state, [
              "navBar",
              "messTooltip"
            ])}
            onCaltooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, ["navBar", "caltooltip"]).apply(
                null,
                eventArgs
              );
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onMessTooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, [
                "navBar",
                "messTooltip"
              ]).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onProTooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, ["navBar", "proTooltip"]).apply(
                null,
                eventArgs
              );
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onStatTooltipChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, [
                "navBar",
                "statTooltip"
              ]).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            proTooltip={generateStateValueProp($state, [
              "navBar",
              "proTooltip"
            ])}
            statTooltip={generateStateValueProp($state, [
              "navBar",
              "statTooltip"
            ])}
          />

          <div
            className={classNames(projectcss.all, sty.freeBox__kIVlN, {
              [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant2__kIVlNyjy5]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant2"
                ),
              [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__kIVlNozEcf]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                )
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__dIbI)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.query.data.filter(
                      item => item.username === $ctx.query.username
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    data-plasmic-name={"friendCard"}
                    data-plasmic-override={overrides.friendCard}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.friendCard
                    )}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateSelectFriend"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectFriend"]
                              },
                              operation: 0,
                              value: currentItem
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSelectFriend"] != null &&
                        typeof $steps["updateSelectFriend"] === "object" &&
                        typeof $steps["updateSelectFriend"].then === "function"
                      ) {
                        $steps["updateSelectFriend"] = await $steps[
                          "updateSelectFriend"
                        ];
                      }
                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  document
                                    .querySelectorAll(
                                      ".plasmic_default__all.plasmic_default__div.__wab_text.FriendsDetails__friendCard___3BG5A"
                                    )
                                    .forEach(friend => {
                                      friend.style.background = "#244B87";
                                    });
                                  if (
                                    $state.selectFriend.friend_name ===
                                    currentItem.friend_name
                                  ) {
                                    return (event.target.style.background =
                                      "linear-gradient(90deg, #244B87, white)");
                                  }
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.friend_name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "friend 1";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                );
              })}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__fERo)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__wwTy2)}
                displayHeight={"130px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"130px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/friendo/images/icons8ProfilePicture96Png.png",
                  fullWidth: 96,
                  fullHeight: 96,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kkozq
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.query.data.find(
                        friend =>
                          friend.friend_name ===
                            $state.selectFriend.friend_name &&
                          friend.username === $ctx.query.username
                      )?.friend_name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Sara";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oee8A
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (() => {
                        if ($state.selectFriend.friend_name === "") {
                          const friendId = $ctx.query.friendId;
                          const foundFriend = $queries.query.data.find(
                            friend => friend.friend_name === friendId
                          );
                          $state.selectFriend = foundFriend;
                          return foundFriend.total_score;
                        } else {
                          return $state.selectFriend.total_score;
                        }
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " general mood";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oYfo
                )}
              >
                {"Date of your last connection:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bjxXg
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.selectFriend.timestamp
                        ? $state.selectFriend.timestamp.slice(0, 10)
                        : "";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "You called this friend yesterday.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zrpC
                )}
              >
                {"Personal Note:"}
              </div>
              {(() => {
                try {
                  return !$state.noteUpdate;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__kbThc)}>
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                    defaultValue={(() => {
                      try {
                        return $state.selectFriend.comment;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    onChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "textInput",
                        "value"
                      ]).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={``}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gwG6F
                    )}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateNoteUpdate"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["noteUpdate"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateNoteUpdate"] != null &&
                        typeof $steps["updateNoteUpdate"] === "object" &&
                        typeof $steps["updateNoteUpdate"].then === "function"
                      ) {
                        $steps["updateNoteUpdate"] = await $steps[
                          "updateNoteUpdate"
                        ];
                      }
                    }}
                  >
                    {"submit"}
                  </div>
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.noteUpdate;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__mPlL)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__v8Hd1
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.selectFriend.comment;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "She is my best friend";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___04ErU)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"20px"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateNoteUpdate"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["noteUpdate"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateNoteUpdate"] != null &&
                        typeof $steps["updateNoteUpdate"] === "object" &&
                        typeof $steps["updateNoteUpdate"].then === "function"
                      ) {
                        $steps["updateNoteUpdate"] = await $steps[
                          "updateNoteUpdate"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/friendo/images/icons8Edit24Png.png",
                      fullWidth: 24,
                      fullHeight: 24,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wKbgW
                )}
              >
                {"AI Suggestion"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xg35S
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.selectFriend.suggestion;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " call her";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gtnoe
                    )}
                  >
                    {"See Telegram messages"}
                  </div>
                }
              />
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "navBar", "friendCard", "textInput", "button"],
  navBar: ["navBar"],
  friendCard: ["friendCard"],
  textInput: ["textInput"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFriendsDetails__ArgProps,
          internalVariantPropNames: PlasmicFriendsDetails__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFriendsDetails__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFriendsDetails";
  } else {
    func.displayName = `PlasmicFriendsDetails.${nodeName}`;
  }
  return func;
}

export const PlasmicFriendsDetails = Object.assign(
  // Top-level PlasmicFriendsDetails renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    friendCard: makeNodeComponent("friendCard"),
    textInput: makeNodeComponent("textInput"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicFriendsDetails
    internalVariantProps: PlasmicFriendsDetails__VariantProps,
    internalArgProps: PlasmicFriendsDetails__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFriendsDetails;
/* prettier-ignore-end */
