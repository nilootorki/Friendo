// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: d1S8dWKKr4PVKg3azHqMAd
// Component: FF1ZM-8Jk0J7
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  renderPlasmicSlot,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: R-SJru1lXq4W/component
import StartBut from "../../StartBut"; // plasmic-import: 8wb4OZrnW-52/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { useScreenVariants as useScreenVariantss47GOinckgZx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: s47GOinckgZX/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: d1S8dWKKr4PVKg3azHqMAd/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: FF1ZM-8Jk0J7/css

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array("textAppear");

export const PlasmicHomepage__ArgProps = new Array("children");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textAppear",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.textAppear
      },
      {
        path: "startBut.showel",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantss47GOinckgZx()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"visibleText"}
          data-plasmic-override={overrides.visibleText}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.visibleText,
            {
              [sty.visibleTexttextAppear]: hasVariant(
                $state,
                "textAppear",
                "textAppear"
              )
            }
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox___8BIe9)}>
            {renderPlasmicSlot({
              defaultContents: (
                <Button
                  className={classNames("__wab_instance", sty.button__z72M2)}
                  disabled={false}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mWc3
                      )}
                    >
                      {"Sign In"}
                    </div>
                  }
                  onClick={async event => {
                    const $steps = {};
                    $steps["goToSignInPage"] = true
                      ? (() => {
                          const actionArgs = { destination: `/sign-in-page` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToSignInPage"] != null &&
                      typeof $steps["goToSignInPage"] === "object" &&
                      typeof $steps["goToSignInPage"].then === "function"
                    ) {
                      $steps["goToSignInPage"] = await $steps["goToSignInPage"];
                    }
                  }}
                />
              ),

              value: args.children,
              className: classNames(sty.slotTargetChildren)
            })}
          </div>
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section, {
              [sty.sectiontextAppear]: hasVariant(
                $state,
                "textAppear",
                "textAppear"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__rKLbM)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__sYsdm)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"600px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/friendo/images/_613F5Fed16381700041030D6Png.png",
                  fullWidth: 2000,
                  fullHeight: 1125,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___3Vw4G
              )}
            >
              {"AI friendship quality assurance"}
            </div>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__cAKmw)}
              displayHeight={"516px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"500px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/friendo/images/images1Jpg.jpg",
                fullWidth: 188,
                fullHeight: 267,
                aspectRatio: undefined
              }}
            />

            <div className={classNames(projectcss.all, sty.freeBox__gJb74)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___6Ut6N)}
                displayHeight={"270px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"270px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/friendo/images/d7A02Ad17A012Be9Afbd10644Cc7A41FJpg.jpg",
                  fullWidth: 736,
                  fullHeight: 900,
                  aspectRatio: undefined
                }}
              />
            </div>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__eij6)}
              displayHeight={"550px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"550px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/friendo/images/d7A02Ad17A012Be9Afbd10644Cc7A41FJpg.jpg",
                fullWidth: 736,
                fullHeight: 900,
                aspectRatio: undefined
              }}
            />
          </section>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__pwqS,
              {
                [sty.texttextAppear__pwqS3N8CM]: hasVariant(
                  $state,
                  "textAppear",
                  "textAppear"
                )
              }
            )}
          >
            {
              "Friendo is an AI-driven friendship management system that helps you evaluate \rand nurture your friendships by analyzing interactions, moods, and personalized AI insights. It is designed to help you increase the quality of your friendships effortlessly!"
            }
          </div>
          <StartBut
            data-plasmic-name={"startBut"}
            data-plasmic-override={overrides.startBut}
            className={classNames("__wab_instance", sty.startBut)}
            onShowelChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, ["startBut", "showel"]).apply(
                null,
                eventArgs
              );
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showel={generateStateValueProp($state, ["startBut", "showel"])}
          />

          <Reveal
            data-plasmic-name={"reveal"}
            data-plasmic-override={overrides.reveal}
            className={classNames("__wab_instance", sty.reveal, {
              [sty.revealtextAppear]: hasVariant(
                $state,
                "textAppear",
                "textAppear"
              )
            })}
            triggerOnce={true}
          >
            {(
              hasVariant($state, "textAppear", "textAppear")
                ? true
                : (() => {
                    try {
                      return $state.startBut.showel;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
            ) ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__e6Rol, {
                  [sty.freeBoxtextAppear__e6Rol3N8CM]: hasVariant(
                    $state,
                    "textAppear",
                    "textAppear"
                  )
                })}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateUnnamedVariant"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["textAppear"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;
                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateUnnamedVariant"] != null &&
                    typeof $steps["updateUnnamedVariant"] === "object" &&
                    typeof $steps["updateUnnamedVariant"].then === "function"
                  ) {
                    $steps["updateUnnamedVariant"] = await $steps[
                      "updateUnnamedVariant"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dWjA8
                  )}
                >
                  {
                    "Before we get satrted, to get access to your phone calls and sms texts, Friendo provides a mobile app that you need to install on your phone. Sign up is done through the app, which then connects you directly to the website to continue exploring different aspects of the program."
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wbZzK
                  )}
                >
                  {"Download friendo app:"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__xIsV)}>
                  <Button
                    data-plasmic-name={"downloadbut"}
                    data-plasmic-override={overrides.downloadbut}
                    className={classNames("__wab_instance", sty.downloadbut)}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nych6
                        )}
                      >
                        {"Download"}
                      </div>
                    }
                  />
                </div>
              </div>
            ) : null}
          </Reveal>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  visibleText: ["visibleText", "section", "startBut", "reveal", "downloadbut"],
  section: ["section"],
  startBut: ["startBut"],
  reveal: ["reveal", "downloadbut"],
  downloadbut: ["downloadbut"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "visibleText") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("visibleText"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    startBut: makeNodeComponent("startBut"),
    reveal: makeNodeComponent("reveal"),
    downloadbut: makeNodeComponent("downloadbut"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
