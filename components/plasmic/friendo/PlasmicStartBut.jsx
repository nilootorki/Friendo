// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: d1S8dWKKr4PVKg3azHqMAd
// Component: 8wb4OZrnW-52
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  get as $stateGet,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: R-SJru1lXq4W/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: d1S8dWKKr4PVKg3azHqMAd/projectcss
import sty from "./PlasmicStartBut.module.css"; // plasmic-import: 8wb4OZrnW-52/css

createPlasmicElementProxy;

export const PlasmicStartBut__VariantProps = new Array();

export const PlasmicStartBut__ArgProps = new Array("showel", "onShowelChange");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStartBut__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "showel",
        type: "writable",
        variableType: "boolean",
        valueProp: "showel",
        onChangeProp: "onShowelChange"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <Button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root)}
      label={
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
          onClick={async event => {
            const $steps = {};
          }}
        >
          {"Get started right now!"}
        </div>
      }
      onClick={async event => {
        const $steps = {};
        $steps["updateShowel"] = true
          ? (() => {
              const actionArgs = {
                variable: {
                  objRoot: $state,
                  variablePath: ["showel"]
                },
                operation: 4
              };
              return (({ variable, value, startIndex, deleteCount }) => {
                if (!variable) {
                  return;
                }
                const { objRoot, variablePath } = variable;
                const oldValue = $stateGet(objRoot, variablePath);
                $stateSet(objRoot, variablePath, !oldValue);
                return !oldValue;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateShowel"] != null &&
          typeof $steps["updateShowel"] === "object" &&
          typeof $steps["updateShowel"].then === "function"
        ) {
          $steps["updateShowel"] = await $steps["updateShowel"];
        }
      }}
    />
  );
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStartBut__ArgProps,
          internalVariantPropNames: PlasmicStartBut__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStartBut__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStartBut";
  } else {
    func.displayName = `PlasmicStartBut.${nodeName}`;
  }
  return func;
}

export const PlasmicStartBut = Object.assign(
  // Top-level PlasmicStartBut renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicStartBut
    internalVariantProps: PlasmicStartBut__VariantProps,
    internalArgProps: PlasmicStartBut__ArgProps
  }
);

export default PlasmicStartBut;
/* prettier-ignore-end */
