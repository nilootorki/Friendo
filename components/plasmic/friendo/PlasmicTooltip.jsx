// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: d1S8dWKKr4PVKg3azHqMAd
// Component: djnekkvBQrac
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  renderPlasmicSlot,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { BaseTooltip } from "@plasmicpkgs/react-aria/skinny/registerTooltip";
import OverlayArrow from "../../OverlayArrow"; // plasmic-import: Nhye0hOxPGVM/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: d1S8dWKKr4PVKg3azHqMAd/projectcss
import sty from "./PlasmicTooltip.module.css"; // plasmic-import: djnekkvBQrac/css

createPlasmicElementProxy;

export const PlasmicTooltip__VariantProps = new Array();

export const PlasmicTooltip__ArgProps = new Array(
  "openDelay",
  "closeDelay",
  "placement",
  "isDisabled",
  "showArrow",
  "offset",
  "triggerAction",
  "trigger",
  "content"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTooltip__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          openDelay: 0,
          closeDelay: 0,
          placement: "top",
          showArrow: false,
          offset: 10
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "ariaTooltip.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const [$ccVariants, setDollarCcVariants] = React.useState({
    placementTop: false,
    placementBottom: false,
    placementLeft: false,
    placementRight: false
  });
  const updateVariant = React.useCallback(changes => {
    setDollarCcVariants(prev => {
      if (!Object.keys(changes).some(k => prev[k] !== changes[k])) {
        return prev;
      }
      return { ...prev, ...changes };
    });
  }, []);
  return (
    <BaseTooltip
      data-plasmic-name={"ariaTooltip"}
      data-plasmic-override={overrides.ariaTooltip}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.ariaTooltip
      )}
      closeDelay={args.closeDelay}
      delay={args.openDelay}
      isDisabled={args.isDisabled}
      isOpen={generateStateValueProp($state, ["ariaTooltip", "isOpen"])}
      offset={args.offset}
      onOpenChange={async (...eventArgs) => {
        generateStateOnChangeProp($state, ["ariaTooltip", "isOpen"]).apply(
          null,
          eventArgs
        );
      }}
      placement={args.placement}
      plasmicUpdateVariant={updateVariant}
      resetClassName={classNames(
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens
      )}
      tooltipContent={
        <React.Fragment>
          <OverlayArrow
            data-plasmic-name={"overlayArrow"}
            data-plasmic-override={overrides.overlayArrow}
            className={classNames("__wab_instance", sty.overlayArrow)}
            dark={true}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hjNt
                    )}
                  >
                    {"Hello from Tooltip! "}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vc6Hv
                    )}
                  >
                    {"Lorem ipsum dolor sit amet"}
                  </div>
                </React.Fragment>
              ),

              value: args.content,
              className: classNames(sty.slotTargetContent)
            })}
          </Stack__>
        </React.Fragment>
      }
      trigger={args.triggerAction}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__a9VH
            )}
          >
            {"Hover me!"}
          </div>
        ),

        value: args.trigger,
        className: classNames(sty.slotTargetTrigger)
      })}
    </BaseTooltip>
  );
}

const PlasmicDescendants = {
  ariaTooltip: ["ariaTooltip", "overlayArrow", "freeBox"],
  overlayArrow: ["overlayArrow"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTooltip__ArgProps,
          internalVariantPropNames: PlasmicTooltip__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTooltip__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "ariaTooltip") {
    func.displayName = "PlasmicTooltip";
  } else {
    func.displayName = `PlasmicTooltip.${nodeName}`;
  }
  return func;
}

export const PlasmicTooltip = Object.assign(
  // Top-level PlasmicTooltip renders the root element
  makeNodeComponent("ariaTooltip"),
  {
    // Helper components rendering sub-elements
    overlayArrow: makeNodeComponent("overlayArrow"),
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicTooltip
    internalVariantProps: PlasmicTooltip__VariantProps,
    internalArgProps: PlasmicTooltip__ArgProps
  }
);

export default PlasmicTooltip;
/* prettier-ignore-end */
