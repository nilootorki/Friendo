// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: d1S8dWKKr4PVKg3azHqMAd
// Component: 63kH-ijjFAGV
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { BaseButton } from "@plasmicpkgs/react-aria/skinny/registerButton";
import { useScreenVariants as useScreenVariantss47GOinckgZx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: s47GOinckgZX/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: d1S8dWKKr4PVKg3azHqMAd/projectcss
import sty from "./PlasmicNewPage.module.css"; // plasmic-import: 63kH-ijjFAGV/css
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: iWZ-MOjTzM2q/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: 4U7RqXjib7I_/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: Cp2L8zi4lzbR/icon

createPlasmicElementProxy;

export const PlasmicNewPage__VariantProps = new Array();

export const PlasmicNewPage__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantss47GOinckgZx()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"introoductionPage"}
          data-plasmic-override={overrides.introoductionPage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.introoductionPage
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox___4JnBg)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vxLt1)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vkLix)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__gl3Bu)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"40px"}
                  src={{
                    src: "/plasmic/friendo/images/image13.svg",
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__bjGzD)}
                >
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___0RKb1
                    )}
                    component={Link}
                    href={"https://www.plasmic.app/"}
                    platform={"nextjs"}
                  >
                    {"Services"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__alZFu
                    )}
                    component={Link}
                    href={"https://www.plasmic.app/"}
                    platform={"nextjs"}
                  >
                    {"Features"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__qtG43
                    )}
                    component={Link}
                    href={"https://www.plasmic.app/"}
                    platform={"nextjs"}
                  >
                    {"Company"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__laLbg
                    )}
                    component={Link}
                    href={"https://www.plasmic.app/"}
                    platform={"nextjs"}
                  >
                    {"Contact"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__nhSuj
                    )}
                    component={Link}
                    href={"https://www.plasmic.app/"}
                    platform={"nextjs"}
                  >
                    {"Log in"}
                  </PlasmicLink__>
                  <BaseButton
                    className={classNames(
                      "__wab_instance",
                      sty.ariaButton__bZobp
                    )}
                    target={$props.openLinkInNewTab ? "_blank" : "_self"}
                  >
                    {false ? (
                      <div
                        data-plasmic-name={"softBackground2"}
                        data-plasmic-override={overrides.softBackground2}
                        className={classNames(
                          projectcss.all,
                          sty.softBackground2
                        )}
                      />
                    ) : null}
                    {false ? (
                      <div
                        data-plasmic-name={"border2"}
                        data-plasmic-override={overrides.border2}
                        className={classNames(projectcss.all, sty.border2)}
                      />
                    ) : null}
                    <div
                      data-plasmic-name={"interactionEffect2"}
                      data-plasmic-override={overrides.interactionEffect2}
                      className={classNames(
                        projectcss.all,
                        sty.interactionEffect2
                      )}
                    />

                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1XauC
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__exaA
                        )}
                      >
                        <CircleIcon
                          className={classNames(projectcss.all, sty.svg__ybOuB)}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jXiA
                        )}
                      >
                        {"Sign up"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tGh2G
                        )}
                      >
                        <ChevronDownIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___3Fki4
                          )}
                          role={"img"}
                        />
                      </div>
                    </Stack__>
                  </BaseButton>
                </Stack__>
              </Stack__>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__sxfjr)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kmkkq)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__lGwXa)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__edG4N)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hBpV6
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {"Designs that inspire "}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontStyle: "italic" }}
                        >
                          {"and"}
                        </span>
                        <React.Fragment>{" communicate"}</React.Fragment>
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ojp5T
                      )}
                    >
                      {
                        "Maecenas hendrerit dolor orci diam odio quam vestibulum suspendisse accumsan a facilisi arcu eu integer bibendum ridiculus feugiat a non sed."
                      }
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__a6Vvy)}
                  >
                    <BaseButton
                      className={classNames(
                        "__wab_instance",
                        sty.ariaButton__yYqAb
                      )}
                      target={$props.openLinkInNewTab ? "_blank" : "_self"}
                    >
                      {false ? (
                        <div
                          data-plasmic-name={"softBackground"}
                          data-plasmic-override={overrides.softBackground}
                          className={classNames(
                            projectcss.all,
                            sty.softBackground
                          )}
                        />
                      ) : null}
                      {false ? (
                        <div
                          data-plasmic-name={"border"}
                          data-plasmic-override={overrides.border}
                          className={classNames(projectcss.all, sty.border)}
                        />
                      ) : null}
                      <div
                        data-plasmic-name={"interactionEffect"}
                        data-plasmic-override={overrides.interactionEffect}
                        className={classNames(
                          projectcss.all,
                          sty.interactionEffect
                        )}
                      />

                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__awEVp
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___6DYpD
                          )}
                        >
                          <CircleIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__irMkK
                            )}
                            role={"img"}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zDseU
                          )}
                        >
                          {"Start now"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wZdm8
                          )}
                        >
                          <Icon4Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__cxTyy
                            )}
                            role={"img"}
                          />
                        </div>
                      </Stack__>
                    </BaseButton>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__fLky
                      )}
                      component={Link}
                      href={"https://www.plasmic.app/"}
                      platform={"nextjs"}
                    >
                      {"Learn more..."}
                    </PlasmicLink__>
                  </Stack__>
                </Stack__>
                <div className={classNames(projectcss.all, sty.freeBox__a0KnQ)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nxqiY)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__iXnh)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"240px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/friendo/images/imagesJpg.jpg",
                        fullWidth: 275,
                        fullHeight: 183,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              </Stack__>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  introoductionPage: [
    "introoductionPage",
    "softBackground2",
    "border2",
    "interactionEffect2",
    "softBackground",
    "border",
    "interactionEffect"
  ],

  softBackground2: ["softBackground2"],
  border2: ["border2"],
  interactionEffect2: ["interactionEffect2"],
  softBackground: ["softBackground"],
  border: ["border"],
  interactionEffect: ["interactionEffect"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewPage__ArgProps,
          internalVariantPropNames: PlasmicNewPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "introoductionPage") {
    func.displayName = "PlasmicNewPage";
  } else {
    func.displayName = `PlasmicNewPage.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage = Object.assign(
  // Top-level PlasmicNewPage renders the root element
  makeNodeComponent("introoductionPage"),
  {
    // Helper components rendering sub-elements
    softBackground2: makeNodeComponent("softBackground2"),
    border2: makeNodeComponent("border2"),
    interactionEffect2: makeNodeComponent("interactionEffect2"),
    softBackground: makeNodeComponent("softBackground"),
    border: makeNodeComponent("border"),
    interactionEffect: makeNodeComponent("interactionEffect"),
    // Metadata about props expected for PlasmicNewPage
    internalVariantProps: PlasmicNewPage__VariantProps,
    internalArgProps: PlasmicNewPage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage;
/* prettier-ignore-end */
