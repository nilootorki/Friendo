// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: d1S8dWKKr4PVKg3azHqMAd
// Component: k5tf2deh1V9A
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: d1S8dWKKr4PVKg3azHqMAd/projectcss
import sty from "./PlasmicRecommendation.module.css"; // plasmic-import: k5tf2deh1V9A/css

createPlasmicElementProxy;

export const PlasmicRecommendation__VariantProps = new Array("commentShow2");

export const PlasmicRecommendation__ArgProps = new Array(
  "children",
  "currentItem",
  "variable2",
  "onVariable2Change"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRecommendation__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "commentShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "variable2",
        type: "writable",
        variableType: "boolean",
        valueProp: "variable2",
        onChangeProp: "onVariable2Change"
      },
      {
        path: "commentShow2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.commentShow2
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    componentData: usePlasmicDataOp(() => {
      return {
        sourceId: "jPx9VXTMGhi2nPHAixuLPM",
        opId: "2e947b72-8f4f-43f4-b032-c2f857fa9421",
        userArgs: {},
        cacheKey: `plasmic.$.2e947b72-8f4f-43f4-b032-c2f857fa9421.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__vqzaP, ``)} />
      <div className={classNames(projectcss.all, sty.freeBox__cOyBb)}>
        <div className={classNames(projectcss.all, sty.freeBox___8MQj5)}>
          {renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <div className={classNames(projectcss.all, sty.freeBox__wKrE6)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bQt6J
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.currentItem.suggestion;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "You should call sara, its been a long time!";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__dbgnu)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"30px"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateVariable2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["variable2"]
                              },
                              operation: 0,
                              value: !$state.variable2
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateVariable2"] != null &&
                        typeof $steps["updateVariable2"] === "object" &&
                        typeof $steps["updateVariable2"].then === "function"
                      ) {
                        $steps["updateVariable2"] = await $steps[
                          "updateVariable2"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/friendo/images/icons8Note48Png.png",
                      fullWidth: 48,
                      fullHeight: 48,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                {(() => {
                  try {
                    return true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__v8WSa)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zL0Wu
                      )}
                    >
                      {"this recommendation is great!"}
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__hVsZa)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/friendo/images/icons8Edit24Png.png",
                        fullWidth: 24,
                        fullHeight: 24,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wbaD5
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.currentItem.timestamp.slice(0, 10);
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "2 hours ago";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </React.Fragment>
            ),

            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRecommendation__ArgProps,
          internalVariantPropNames: PlasmicRecommendation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRecommendation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRecommendation";
  } else {
    func.displayName = `PlasmicRecommendation.${nodeName}`;
  }
  return func;
}

export const PlasmicRecommendation = Object.assign(
  // Top-level PlasmicRecommendation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicRecommendation
    internalVariantProps: PlasmicRecommendation__VariantProps,
    internalArgProps: PlasmicRecommendation__ArgProps
  }
);

export default PlasmicRecommendation;
/* prettier-ignore-end */
