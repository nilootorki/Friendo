import { applySelector as _applySelector, ComponentMeta, DataProvider as _DataProvider, DataProviderProps, SelectorDict, useDataEnv as _useDataEnv, useSelector as _useSelector, useSelectors as _useSelectors } from "@plasmicapp/host";
import registerComponent from "@plasmicapp/host/registerComponent";
import React, { ComponentProps, ReactNode } from "react";
/**
 * @deprecated This should be imported from @plasmicapp/host instead.
 */
export declare const applySelector: typeof _applySelector;
/**
 * @deprecated This should be imported from @plasmicapp/host instead.
 */
export declare const useSelector: typeof _useSelector;
/**
 * @deprecated This should be imported from @plasmicapp/host instead.
 */
export declare const useSelectors: typeof _useSelectors;
/**
 * @deprecated This should be imported from @plasmicapp/host instead.
 */
export declare const useDataEnv: typeof _useDataEnv;
export declare const DataProvider: typeof _DataProvider;
export interface CommonDynamicProps {
    className?: string;
    tag?: string;
    propSelectors?: SelectorDict;
}
export declare function DynamicElement<Tag extends keyof JSX.IntrinsicElements = "div">({ tag, className, children, propSelectors, ...props }: CommonDynamicProps & ComponentProps<Tag>): React.DOMElement<any, Element>;
export interface DynamicTextProps extends CommonDynamicProps {
    selector?: string;
}
export declare function DynamicText({ selector, propSelectors, ...props }: DynamicTextProps): React.JSX.Element;
export interface DynamicImageProps extends CommonDynamicProps, ComponentProps<"img"> {
    selector?: string;
}
export declare function DynamicImage({ selector, propSelectors, ...props }: DynamicImageProps): React.JSX.Element;
export interface DynamicRepeaterProps {
    children?: ReactNode;
    loopItemName?: string;
    keySelector?: string;
    selector?: string;
    data?: any;
}
export declare function DynamicRepeater({ children, loopItemName, keySelector, selector, data, }: DynamicRepeaterProps): React.JSX.Element;
export declare const dynamicRepeaterProps: {
    readonly selector: {
        readonly type: "string";
        readonly description: "The selector expression to use to get the array of data to loop over, such as: someVariable.0.someField";
    };
    readonly loopItemName: {
        readonly type: "string";
        readonly defaultValue: "item";
        readonly description: "The name of the variable to use to store the current item in the loop";
    };
    readonly children: {
        readonly type: "slot";
        readonly isRepeated: true;
    };
};
export declare const dynamicRepeaterMeta: ComponentMeta<DynamicRepeaterProps>;
export declare function registerDynamicRepeater(loader?: {
    registerComponent: typeof registerComponent;
}, customDynamicRepeaterMeta?: ComponentMeta<DynamicRepeaterProps>): void;
export declare const dataProviderMeta: ComponentMeta<DataProviderProps>;
export declare function registerDataProvider(loader?: {
    registerComponent: typeof registerComponent;
}, customDataProviderMeta?: ComponentMeta<DataProviderProps>): void;
export declare const dynamicElementMeta: ComponentMeta<CommonDynamicProps>;
export declare function registerDynamicElement(loader?: {
    registerComponent: typeof registerComponent;
}, customDynamicElementMeta?: ComponentMeta<CommonDynamicProps>): void;
export declare const dynamicTextMeta: ComponentMeta<DynamicTextProps>;
export declare function registerDynamicText(loader?: {
    registerComponent: typeof registerComponent;
}, customDynamicTextMeta?: ComponentMeta<DynamicTextProps>): void;
export declare const dynamicImageMeta: ComponentMeta<DynamicImageProps>;
export declare function registerDynamicImage(loader?: {
    registerComponent: typeof registerComponent;
}, customDynamicImageMeta?: ComponentMeta<DynamicImageProps>): void;
