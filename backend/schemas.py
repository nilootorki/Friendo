#data validation to ensure that data we store, follows a proper format
from pydantic import BaseModel   #pydantiic is a data validation and serialization library that FastAPII uses to ensure data is valid and structured properly
from typing import Optional,List,Dict
from datetime import datetime
from typing import Any, Dict


#define Pydantic models
class SignupResponse(BaseModel):
    success: bool
    message: str
        

class FriendsBase(BaseModel):   #defines the fields that should exist in every contact objects
    name:str
    phone_number:Optional[str]=None   #not sure to add these
    emaiL:Optional[str] =None
    
    
    
class FriendsResponse(FriendsBase):
    class config:
        orm_mode=True
        

class UserCreate(BaseModel):
    username: str
    email: str
    password: str  # Raw password (to be hashed before saving)

class ProfileCreate(BaseModel):
    username: str
    password: str
    email: str
    personality: str
    mbti: str

class UserFriend(BaseModel):
    username: str
    password: str
    email: str
    contacts: List


# Schema for returning user data (output)
class UserResponse(BaseModel):
    user_id: int  # Automatically generated by DB
    username: str
    email: str
    personality_type: Optional[str] = None
    mbti: Optional[str] = None
    created_at: Optional[datetime] = None
    contacts: Optional[List[Dict[str, Any]]] = None

    class Config:
        from_attributes = True

class UserFriendSchema(BaseModel):
    id: int
    user_id: int
    username : str
    friend_name: str
    interaction_type: str
    timestamp: datetime
    messages: Dict[str, Any]
    score: List[Dict[str, Any]]



    class Config:
        from_attributes = True


class UserSuggestionSchema(BaseModel):
    id: int
    user_id: int
    username : str
    friend_name: str
    suggestion: str
    gender: str
    comment: str
    time_stamp: datetime
    total_score: float

    class Config:
        from_attributes = True
        
